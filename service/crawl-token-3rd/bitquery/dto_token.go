package bitquery

import (
	"crawl-token-3rd-service/pkg/db"
)

type ListTokenEthereumBitquery struct {
	// List []
}

type Response struct {
	Data Data `json:"data"`
}

type Data struct {
	Ethereum Ethereum `json:"ethereum"`
}

type Ethereum struct {
	SmartContractCalls []SmartContractCall `json:"smartContractCalls"`
}

type SmartContractCall struct {
	Block         Block         `json:"block"`
	SmartContract SmartContract `json:"smartContract"`
}

type Block struct {
	Height int `json:"height"`
}

type SmartContract struct {
	Address  Address  `json:"address"`
	Currency Currency `json:"currency"`
}

type Address struct {
	Address string `json:"address"`
}

type Currency struct {
	Name      string `json:"name"`
	Symbol    string `json:"symbol"`
	Decimals  int    `json:"decimals"`
	TokenType string `json:"tokenType"`
}

type AutoGenerated struct {
	Data struct {
		Ethereum struct {
			SmartContractCalls []struct {
				Block struct {
					Height int `json:"height"`
				} `json:"block"`
				SmartContract struct {
					Address struct {
						Address string `json:"address"`
					} `json:"address"`
					Currency struct {
						Name      string `json:"name"`
						Symbol    string `json:"symbol"`
						Decimals  int    `json:"decimals"`
						TokenType string `json:"tokenType"`
					} `json:"currency"`
				} `json:"smartContract"`
			} `json:"smartContractCalls"`
		} `json:"ethereum"`
	} `json:"data"`
}

type ListFailBscBitquery struct {
	List []FailBscBitquery
}

type FailBscBitquery struct {
	Start       string
	End         string
	Err         string
	CreatedDate string
}

func (b *FailBscBitquery) Insert() error {
	query := `INSERT INTO failBscBitquery (start, "end", err, createddate)  values ($1, $2, $3, $4)`

	_, err := db.PSQL.Exec(query, b.Start, b.End, b.Err, b.CreatedDate)
	if err != nil {
		return err
	}
	return nil

}

func (list *ListFailBscBitquery) GetList() error {
	query := `Select * from failBscBitquery`

	rows, err := db.PSQL.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var fail FailBscBitquery

		err := rows.Scan(&fail.Start, &fail.End, &fail.Err, &fail.CreatedDate)
		if err != nil {
			return err
		}

		list.List = append(list.List, fail)
	}

	return nil
}
